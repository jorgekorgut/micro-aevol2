#include "bitset.h"
#include <boost/dynamic_bitset.hpp>
#include <iostream>
#include <sys/time.h>

void testPrintBitsetDebug()
{
    Bitset bitset(std::string("110011110011"), 14);
    bitset.printDebug();
}

void testPrintBitsetReverse()
{
    Bitset bitset(std::string("1100"), 10, true);
    bitset.printDebug();
}

void testPrintBitsetBigReverse()
{
    Bitset bitset(std::string("1100111111"), 20, true);
    bitset.printDebug();
}

void testRightShiftBlockAlignDebug()
{
    Bitset bitset(std::string("11001111"), 20, false);
    bitset >>= 8;
    bitset.printDebug();
}

void testPrint()
{
    Bitset bitset(std::string("11001111"), 20, false);
    bitset.print();
}

void testComparePrintPrintDebug()
{
    Bitset bitset(std::string("11001111"), 20, true);
    bitset.print();
    bitset.printDebug();
}

void testRightShiftBlockAlign()
{
    Bitset bitset(std::string("11001111"), 20, false);
    bitset >>= 8;
    bitset.print();
}

void testRightShiftBlockNotAlignDebug()
{
    Bitset bitset(std::string("11001111"), 20, false);
    std::cout << "Before : ";
    bitset.printDebug();
    bitset >>= 2;
    std::cout << "After  : ";
    bitset.printDebug();
}

void testRightShiftBlockNotAlign()
{
    Bitset bitset(std::string("11001111"), 20, false);
    std::cout << "Before : ";
    bitset.print();
    bitset >>= 2;
    std::cout << "After  : ";
    bitset.print();
}

void testRightShiftBlockNotAlignBiggerThanBlock()
{
    Bitset bitset(std::string("11001111"), 20, false);
    std::cout << "Before : ";
    bitset.print();
    bitset >>= 15;
    std::cout << "After  : ";
    bitset.print();
}

void testRightShiftBlockNotAlignBiggerThanSizeDebug()
{
    Bitset bitset(std::string("11001111"), 20, false);
    std::cout << "Before : ";
    bitset.printDebug();
    bitset >>= 32;
    std::cout << "After  : ";
    bitset.printDebug();
}

void testRightShiftBlockNotAlignBiggerThanSizeEdgeCaseDebug()
{
    Bitset bitset(std::string("11001111"), 6, false);
    std::cout << "Before : ";
    bitset.printDebug();
    bitset >>= 15;
    std::cout << "After  : ";
    bitset.printDebug();
}

void testRightShiftBlockNotAlignBiggerThanSizeEdgeCase()
{
    Bitset bitset(std::string("11001111"), 6, false);
    std::cout << "Before : ";
    bitset.print();
    bitset >>= 5;
    std::cout << "After  : ";
    bitset.print();
}

void testPerformanceLeftShiftBoost()
{
    struct timeval begin, end;

    Bitset bitset(std::stringfalse);

    gettimeofday(&begin, NULL);
    for (int i = 0; i < 10000; i++)
    {
        bitset >>= 10;
    }
    gettimeofday(&end, NULL);
    double time = 1.0 * (end.tv_sec - begin.tv_sec) + 1.0e-6 * (end.tv_usec - begin.tv_usec);
    std::cout << "Bitset => " << time << std::endl;

    boost::dynamic_bitset<> PROM_SEQ(std::string

    gettimeofday(&begin, NULL);
    for (int i = 0; i < 10000; i++)
    {
        PROM_SEQ >>= 10;
    }
    gettimeofday(&end, NULL);
    time = 1.0 * (end.tv_sec - begin.tv_sec) + 1.0e-6 * (end.tv_usec - begin.tv_usec);
    std::cout << "boost::dynamic_bitset => " << time << std::endl;

    std::bitset<4777> staticBitset(std::string

    gettimeofday(&begin, NULL);
    for (int i = 0; i < 10000; i++)
    {
        staticBitset >>= 10;
    }
    gettimeofday(&end, NULL);
    time = 1.0 * (end.tv_sec - begin.tv_sec) + 1.0e-6 * (end.tv_usec - begin.tv_usec);
    std::cout << "std::staticBitset => " << time << std::endl;
}

void testLeftShiftBlockNotAlign()
{
    Bitset bitset(std::string("1100111100"), 20, false);
    bitset <<= 6;
    bitset.print();
}

void testLeftShiftBlockNotAlignDebug()
{
    Bitset bitset(std::string("1100111100"), 20, false);
    bitset <<= 6;
    bitset.printDebug();
}

void testLeftShiftBlockAlign()
{
    Bitset bitset(std::string("00111100111100"), 20, false);
    bitset <<= 8;
    bitset.print();
}

void testLeftShiftBlockAlignDebug()
{
    Bitset bitset(std::string("00111100111100"), 20, false);
    bitset <<= 8;
    bitset.printDebug();
}

void testdoReset()
{
    Bitset bitset(std::string("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 140, false);
    u_int64_t *const blocks = bitset.getBlocks();
    std::cout << "Before " << std::endl;
    bitset.printDebug(blocks, bitset.getBlockSizeBites());
    Bitset::doReset(blocks, bitset.getBlockSizeBites(), 12, 132);
    std::cout << "After " << std::endl;
    bitset.printDebug(blocks, bitset.getBlockSizeBites());
}

void testPerformanceReset()
{
    struct timeval begin, end;

    Bitset bitset(std::stringfalse);
    u_int64_t *blocks = bitset.getBlocks();
    gettimeofday(&begin, NULL);
    for (int i = 0; i < 1000; i++)
    {
        Bitset::doReset(blocks, bitset.getBlockSizeBites(), 400, 2000);
    }
    gettimeofday(&end, NULL);
    double time = 1.0 * (end.tv_sec - begin.tv_sec) + 1.0e-6 * (end.tv_usec - begin.tv_usec);
    std::cout << "Bitset => " << time << std::endl;

    boost::dynamic_bitset<> PROM_SEQ(std::string

    gettimeofday(&begin, NULL);
    for (int i = 0; i < 10000; i++)
    {
        PROM_SEQ.reset(400, 2000);
    }
    gettimeofday(&end, NULL);
    time = 1.0 * (end.tv_sec - begin.tv_sec) + 1.0e-6 * (end.tv_usec - begin.tv_usec);
    std::cout << "boost::dynamic_bitset => " << time << std::endl;

    std::bitset<4777> staticBitset(std::string

    gettimeofday(&begin, NULL);
    for (int i = 0; i < 10000; i++)
    {
        staticBitset.reset();
    }
    gettimeofday(&end, NULL);
    time = 1.0 * (end.tv_sec - begin.tv_sec) + 1.0e-6 * (end.tv_usec - begin.tv_usec);
    std::cout << "std::staticBitset => " << time << std::endl;
}

void testdoResetEntireBlock()
{
    Bitset bitset(std::string("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 140, false);
    u_int64_t *const blocks = bitset.getBlocks();
    std::cout << "Before " << std::endl;
    bitset.printDebug(blocks, bitset.getBlockSizeBites());
    Bitset::doReset(blocks, bitset.getBlockSizeBites(), 65, 130);
    std::cout << "After " << std::endl;
    bitset.printDebug(blocks, bitset.getBlockSizeBites());
}

void testCompareStartAlign()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom.print();
    Bitset bitsetTo(std::string("0011"), 20, false);
    bitsetTo.print();

    bool response = bitsetFrom.compare(0, bitsetTo, 0, 4);
    std::cout << "Equal ? " << (response ? "yes" : "no") << std::endl;
}

void testCompareStartNotAlignNotEqual()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom.print();
    Bitset bitsetTo(std::string("0011"), 20, false);
    bitsetTo >>= 6;
    bitsetTo.print();

    bool response = bitsetFrom.compare(0, bitsetTo, 6, 5);
    std::cout << "Equal ? " << (response ? "yes" : "no") << std::endl;
}

void testCompareStartNotAlignEqual()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom.print();
    Bitset bitsetTo(std::string("0011"), 20, false);
    bitsetTo >>= 6;
    bitsetTo.print();

    bool response = bitsetFrom.compare(0, bitsetTo, 6, 4);
    std::cout << "Equal ? " << (response ? "yes" : "no") << std::endl;
}

void testAccessElement()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    std::cout << "Element: " << bitsetFrom[6] << std::endl;
}

void testSetElementAlign()
{

    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom.set(2, true);
    bitsetFrom.print();
}

void testSetElementFalseAlign()
{

    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom.set(2, false);
    bitsetFrom.print();
}

void testSetElementFalseNotAlign()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom >>= 2;
    bitsetFrom.set(2, true);
    bitsetFrom.print();
}

void testFlipNotAligned()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom >>= 2;
    bitsetFrom.flip(4);
    bitsetFrom.print();
}

void testFlipAligned()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom.flip(4);
    bitsetFrom.print();
}

void compareDistanceEqual()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom.print();
    Bitset bitsetTo(std::string("0011"), 20, false);
    bitsetTo.print();

    int response = bitsetFrom.compareDistance(0, bitsetTo, 0, 4);
    std::cout << "Distance: " << response << std::endl;
}

void compareDistanceNotEqual()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom.print();
    Bitset bitsetTo(std::string("1011"), 20, false);
    bitsetTo.print();

    int response = bitsetFrom.compareDistance(0, bitsetTo, 0, 4);
    std::cout << "Distance: " << response << std::endl;
}

void compareDistanceNotEqualNotAligned()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);

    bitsetFrom.print();
    Bitset bitsetTo(std::string("1011"), 20, false);
    bitsetTo >>= 2;
    bitsetTo.print();

    int response = bitsetFrom.compareDistance(0, bitsetTo, 0, 4);
    std::cout << "Distance: " << response << std::endl;
}

void compareDistanceNotEqualNotAlignedLeftShift()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom <<= 2;
    bitsetFrom.print();
    Bitset bitsetTo(std::string("1011"), 20, false);
    bitsetTo.print();

    int response = bitsetFrom.compareDistance(0, bitsetTo, 0, 4);
    std::cout << "Distance: " << response << std::endl;
}

void testLeftShiftNotAlign()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom <<= 4;
    bitsetFrom.print();
}

void assertResetAlign()
{
    Bitset bitset(std::string("111111111111111111111111111111111111111"), 40, false);
    u_int64_t *const blocks = bitset.getBlocks();
    std::cout << "Before " << std::endl;
    bitset.printDebug(blocks, bitset.getBlockSizeBites());
    Bitset::doReset(blocks, bitset.getBlockSizeBites(), 64, 90);
    std::cout << "After " << std::endl;
    std::string response = bitset.printDebug(blocks, bitset.getBlockSizeBites());

    // Before                        000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    assert(response == std::string("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
}

void assertLeftShiftNotAligned()
{
    Bitset bitset(std::string("1111111111111111111111111111111111111111"), 40, false);
    std::cout << "Before " << std::endl;
    bitset.print();
    bitset <<= 2;
    std::cout << "After " << std::endl;
    std::string response = bitset.print();

    // Before                        1111111111111111111111111111111111111111
    assert(response == std::string("1111111111111111111111111111111111111100"));
}

void assertAlignBlocksAligned()
{
    int fromIndex = 0;
    const Bitset compareTo(std::string("11110000111100001111000011110000111100001111"), 44, false);
    const Bitset compareFrom(std::string("11110000111100001111000011110000111100001111"), 44, false);
    int toIndex = 1;
    int length = 10;
    int lengthBlock = length / compareTo.getBlockSizeBites() + 1;

    u_int64_t *copyCompareFromBlocks = new u_int64_t[lengthBlock];
    u_int64_t *copyCompareToBlocks = new u_int64_t[lengthBlock];

    compareTo.alignBlocks(copyCompareFromBlocks, fromIndex, copyCompareToBlocks, compareTo, toIndex, length, lengthBlock);

    std::string responseFrom = compareFrom.printDebug(copyCompareFromBlocks, compareFrom.getBlockSizeBites());
    std::string responseTo = compareTo.printDebug(copyCompareToBlocks, compareTo.getBlockSizeBites());

    assert(responseFrom == "111100001111000011110000111100001111000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    assert(responseTo == "111000011110000111100001111000011110000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
}

void assertAlignBlocksNotAlignedLeftShift()
{
    int fromIndex = 0;
    Bitset compareFrom(std::string("11110000111100001111000011110000111100001111"), 44, false);
    Bitset compareTo(std::string("11110000111100001111000011110000111100001111"), 44, false);
    compareFrom <<= 2;

    int toIndex = 1;
    int length = 10;
    int lengthBlock = length / compareTo.getBlockSizeBites() + 1;

    u_int64_t *copyCompareFromBlocks = new u_int64_t[lengthBlock];
    u_int64_t *copyCompareToBlocks = new u_int64_t[lengthBlock];

    compareFrom.alignBlocks(copyCompareFromBlocks, fromIndex, copyCompareToBlocks, compareTo, toIndex, length, lengthBlock);

    std::string responseFrom = compareFrom.printDebug(copyCompareFromBlocks, compareFrom.getBlockSizeBites());
    std::string responseTo = compareTo.printDebug(copyCompareToBlocks, compareTo.getBlockSizeBites());

    assert(responseFrom == "110000111100001111000011110000111100001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    assert(responseTo == "111000011110000111100001111000011110000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
}

void assertAlignBlocksNotAlignedRightShift()
{
    int fromIndex = 0;
    Bitset compareFrom(std::string("11110000111100001111000011110000111100001111"), 44, false);
    Bitset compareTo(std::string("11110000111100001111000011110000111100001111"), 44, false);
    compareFrom >>= 2;

    int toIndex = 1;
    int length = 10;
    int lengthBlock = length / compareTo.getBlockSizeBites() + 1;

    u_int64_t *copyCompareFromBlocks = new u_int64_t[lengthBlock];
    u_int64_t *copyCompareToBlocks = new u_int64_t[lengthBlock];

    compareFrom.alignBlocks(copyCompareFromBlocks, fromIndex, copyCompareToBlocks, compareTo, toIndex, length, lengthBlock);

    std::string responseFrom = compareFrom.printDebug(copyCompareFromBlocks, compareFrom.getBlockSizeBites());
    std::string responseTo = compareTo.printDebug(copyCompareToBlocks, compareTo.getBlockSizeBites());

    assert(responseFrom == "001111000011110000111100001111000011110000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    assert(responseTo == "111000011110000111100001111000011110000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
}

void assertAlignBlocksNotAlignedRightShiftLeftShift()
{
    int fromIndex = 0;
    Bitset compareFrom(std::string("11110000111100001111000011110000111100001111"), 44, false);
    Bitset compareTo(std::string("11110000111100001111000011110000111100001111"), 44, false);
    compareFrom >>= 2;
    compareTo <<= 2;

    int toIndex = 1;
    int length = 10;
    int lengthBlock = length / compareTo.getBlockSizeBites() + 1;

    u_int64_t *copyCompareFromBlocks = new u_int64_t[lengthBlock];
    u_int64_t *copyCompareToBlocks = new u_int64_t[lengthBlock];

    compareFrom.alignBlocks(copyCompareFromBlocks, fromIndex, copyCompareToBlocks, compareTo, toIndex, length, lengthBlock);

    std::string responseFrom = compareFrom.printDebug(copyCompareFromBlocks, compareFrom.getBlockSizeBites());
    std::string responseTo = compareTo.printDebug(copyCompareToBlocks, compareTo.getBlockSizeBites());

    assert(responseFrom == "001111000011110000111100001111000011110000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    assert(responseTo == "100001111000011110000111100001111000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
}

void assertCompareNotEqualNotAlignedLeftShift()
{
    Bitset bitsetFrom(std::string("00111100111100"), 20, false);
    bitsetFrom <<= 2;
    bitsetFrom.print();
    Bitset bitsetTo(std::string("1011"), 20, false);
    bitsetTo.print();

    int response = bitsetFrom.compare(0, bitsetTo, 0, 4);

    assert(response == false);
}

void assertCompareEqualNotAlignedLeftShift()
{
    Bitset bitsetFrom(std::string("00101100111100"), 20, false);
    bitsetFrom <<= 2;
    bitsetFrom.print();
    Bitset bitsetTo(std::string("1011"), 20, false);
    bitsetTo.print();

    int response = bitsetFrom.compare(0, bitsetTo, 0, 4);

    assert(response == true);
}

void assertCompareEqualNotAlignedLeftShiftRightShift()
{
    Bitset bitsetFrom(std::string("00101100111100"), 20, false);
    bitsetFrom <<= 2;
    bitsetFrom.print();
    Bitset bitsetTo(std::string("1100"), 20, false);
    bitsetTo >>= 8;
    bitsetTo.print();

    int response = bitsetFrom.compare(8, bitsetTo, 8, 2);

    assert(response == true);
}

void assertCompareDistance()
{
    Bitset bitsetFrom(std::string("00101100111100"), 20, false);
    bitsetFrom.print();
    Bitset bitsetTo(std::string("1100"), 20, false);
    bitsetTo.print();

    int response = bitsetFrom.compareDistance(0, bitsetTo, 0, 4);

    assert(response == 3);
}

void assertMultipleBlocks()
{
    Bitset bitsetFrom(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 200, false);
    bitsetFrom.print();
    Bitset bitsetTo(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 200, false);
    bitsetTo.print();

    int response = bitsetFrom.compareDistance(0, bitsetTo, 0, 200);
    // std::cout << response << std::endl;
    assert(response == 2);
}

void assertMultipleBlocksLeftShiftedEqual()
{
    Bitset bitsetFrom(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 200, false);
    bitsetFrom.print();
    bitsetFrom <<= 2;
    Bitset bitsetTo(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100"), 200, false);
    bitsetTo.print();

    int response = bitsetFrom.compareDistance(0, bitsetTo, 0, 200);
    // std::cout << response << std::endl;
    assert(response == 0);
}

void assertMultipleBlocksLeftShiftedNotEqual()
{
    Bitset bitsetFrom(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 200, false);
    bitsetFrom.print();
    bitsetFrom <<= 2;
    Bitset bitsetTo(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100"), 200, false);
    bitsetTo.print();

    int response = bitsetFrom.compareDistance(0, bitsetTo, 0, 200);
    // std::cout << response << std::endl;
    assert(response == 4);
}

void assertMultipleBlocksCompare()
{
    Bitset bitsetFrom(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 200, false);
    bitsetFrom.print();
    Bitset bitsetTo(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 200, false);
    bitsetTo.print();

    bool response = bitsetFrom.compare(0, bitsetTo, 0, 200);
    // std::cout << response << std::endl;
    assert(response == false);
}

void assertMultipleBlocksCompareEqual()
{
    Bitset bitsetFrom(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 200, false);
    bitsetFrom.print();
    Bitset bitsetTo(std::string("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 200, false);
    bitsetTo.print();

    bool response = bitsetFrom.compare(0, bitsetTo, 0, 200);
    // std::cout << response << std::endl;
    assert(response == false);
}

void assertMultipleBlockAccess(){
    std::string entry("10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010");
    Bitset bitsetFrom(entry, 320, false);
    bitsetFrom.print();

    assert('0'+bitsetFrom[15] == entry[15]);
    assert('0'+bitsetFrom[32] == entry[32]);
    assert('0'+bitsetFrom[64] == entry[64]);
    assert('0'+bitsetFrom[120] == entry[120]);
    assert('0'+bitsetFrom[201] == entry[201]);
}

void assertAll()
{
    assertLeftShiftNotAligned();
    assertResetAlign();
    assertAlignBlocksAligned();
    assertAlignBlocksNotAlignedLeftShift();
    assertAlignBlocksNotAlignedRightShift();
    assertAlignBlocksNotAlignedRightShiftLeftShift();
    assertCompareNotEqualNotAlignedLeftShift();
    assertCompareEqualNotAlignedLeftShift();
    assertCompareEqualNotAlignedLeftShiftRightShift();
    assertCompareDistance();
    assertMultipleBlocks();
    assertMultipleBlocksLeftShiftedEqual();
    assertMultipleBlocksLeftShiftedNotEqual();
    assertMultipleBlocksCompare();
    assertMultipleBlocksCompareEqual();

    std::cout << "All tests passed!" << std::endl;
}

int main()
{
    // assertAll();
assertMultipleBlockAccess();
    return 0;
}